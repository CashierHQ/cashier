name: Cleanup Artifacts
on:
    pull_request:
        types:
            - closed

# Permissions needed for the GITHUB_TOKEN
permissions:
    actions: write # This allows the workflow to delete artifacts and workflow runs
    contents: read # Default permission to read the repository contents

jobs:
    cleanup:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Cleanup old artifacts and workflow runs
              uses: actions/github-script@v7
              with:
                  script: |
                      const MAX_ARTIFACTS_TO_KEEP = 10;

                      // 1. Get all artifacts and delete old ones
                      async function fetchAllArtifacts() {
                        const allArtifacts = [];
                        let page = 1;
                        let hasMorePages = true;
                        
                        while (hasMorePages) {
                          console.log(`Fetching artifacts page ${page}...`);
                          const response = await github.rest.actions.listArtifactsForRepo({
                            owner: context.repo.owner,
                            repo: context.repo.repo,
                            per_page: 100,  // Maximum allowed
                            page: page
                          });
                          
                          const artifacts = response.data.artifacts;
                          allArtifacts.push(...artifacts);
                          
                          // Check if we've reached the last page
                          if (artifacts.length < 100) {
                            hasMorePages = false;
                          } else {
                            page++;
                          }
                        }
                        
                        return allArtifacts;
                      }

                      console.log("Starting artifact cleanup...");
                      const allArtifacts = await fetchAllArtifacts();
                      console.log(`Found ${allArtifacts.length} artifacts in total.`);

                      // Sort artifacts by creation date (newest first)
                      const sortedArtifacts = allArtifacts.sort((a, b) => 
                        new Date(b.created_at) - new Date(a.created_at)
                      );

                      // Keep only the latest MAX_ARTIFACTS_TO_KEEP artifacts
                      const artifactsToDelete = sortedArtifacts.slice(MAX_ARTIFACTS_TO_KEEP);

                      console.log(`Keeping ${MAX_ARTIFACTS_TO_KEEP} latest artifacts, deleting ${artifactsToDelete.length} older artifacts.`);

                      // Delete the older artifacts
                      let deletedCount = 0;
                      for (const artifact of artifactsToDelete) {
                        console.log(`Deleting artifact ${artifact.id} (${artifact.name}) from ${artifact.created_at}`);
                        try {
                          await github.rest.actions.deleteArtifact({
                            owner: context.repo.owner,
                            repo: context.repo.repo,
                            artifact_id: artifact.id
                          });
                          deletedCount++;
                        } catch (error) {
                          console.log(`Error deleting artifact ${artifact.id}: ${error.message}`);
                        }
                      }

                      console.log(`Successfully deleted ${deletedCount} artifacts.`);

                      // 2. Get all workflow runs
                      async function fetchAllWorkflowRuns() {
                        const allRuns = [];
                        let page = 1;
                        let hasMorePages = true;
                        
                        while (hasMorePages) {
                          console.log(`Fetching workflow runs page ${page}...`);
                          const response = await github.rest.actions.listWorkflowRunsForRepo({
                            owner: context.repo.owner,
                            repo: context.repo.repo,
                            per_page: 100,  // Maximum allowed
                            page: page,
                            status: 'completed'
                          });
                          
                          const runs = response.data.workflow_runs;
                          allRuns.push(...runs);
                          
                          // Check if we've reached the last page
                          if (runs.length < 100) {
                            hasMorePages = false;
                          } else {
                            page++;
                          }
                        }
                        
                        return allRuns;
                      }

                      console.log("Starting workflow run cleanup...");

                      // Get all workflow runs
                      const allWorkflowRuns = await fetchAllWorkflowRuns();
                      console.log(`Found ${allWorkflowRuns.length} workflow runs in total.`);

                      // Group runs by workflow name/ID
                      const workflowMap = {};
                      allWorkflowRuns.forEach(run => {
                        const workflowName = run.name || run.workflow_id.toString();
                        if (!workflowMap[workflowName]) {
                          workflowMap[workflowName] = [];
                        }
                        workflowMap[workflowName].push(run);
                      });

                      // For each workflow, keep only the latest MAX_RUNS_TO_KEEP runs
                      const MAX_RUNS_TO_KEEP = 10;
                      let totalRunsDeleted = 0;

                      for (const workflow in workflowMap) {
                        const workflowRuns = workflowMap[workflow];
                        
                        // Sort runs by date (newest first)
                        const sortedRuns = workflowRuns.sort((a, b) => 
                          new Date(b.created_at) - new Date(a.created_at)
                        );
                        
                        // Keep only the latest runs
                        const runsToDelete = sortedRuns.slice(MAX_RUNS_TO_KEEP);
                        
                        if (runsToDelete.length > 0) {
                          console.log(`Workflow "${workflow}": keeping ${MAX_RUNS_TO_KEEP} latest runs, deleting ${runsToDelete.length} older runs.`);
                          
                          // Delete the older runs
                          for (const run of runsToDelete) {
                            console.log(`Deleting workflow run ${run.id} from ${run.created_at}`);
                            try {
                              await github.rest.actions.deleteWorkflowRun({
                                owner: context.repo.owner,
                                repo: context.repo.repo,
                                run_id: run.id
                              });
                              totalRunsDeleted++;
                            } catch (error) {
                              console.log(`Error deleting workflow run ${run.id}: ${error.message}`);
                            }
                          }
                        }
                      }

                      console.log(`Successfully deleted ${totalRunsDeleted} workflow runs in total.`);
