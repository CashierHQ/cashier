name: Frontend Deployment
on:
    # PRs to main (production) and staging
    pull_request:
        paths:
            - "src/cashier_frontend/**"
        branches:
            - main
            - staging
        types:
            - opened
            - synchronize
            - reopened

    # Any branch push (deploy all to dev)
    push:
        paths:
            - "src/cashier_frontend/**"
        branches:
            - "**" # This catches ALL branches

# Permissions needed for the GITHUB_TOKEN
permissions:
    actions: write # This allows the workflow to delete workflow runs
    contents: write # Need write access to commit version changes
    pull-requests: write # Allow commenting on PRs

jobs:
    setup_environment:
        runs-on: ubuntu-latest
        outputs:
            environment: ${{ steps.set-env.outputs.environment }}
            should_deploy: ${{ steps.set-env.outputs.should_deploy }}
            requires_version_check: ${{ steps.set-env.outputs.requires_version_check }}
            branch_name: ${{ steps.set-env.outputs.branch_name }}
        steps:
            - name: Set deployment environment
              id: set-env
              run: |
                  echo "Event: ${{ github.event_name }}"
                  echo "Ref: ${{ github.ref }}"
                  echo "Ref name: ${{ github.ref_name }}"

                  if [[ "${{ github.event_name }}" == "pull_request" ]]; then
                    TARGET_BRANCH="${{ github.base_ref }}"
                    SOURCE_BRANCH="${{ github.head_ref }}"
                    
                    if [[ "$TARGET_BRANCH" == "main" ]]; then
                      echo "environment=production" >> $GITHUB_OUTPUT
                      echo "should_deploy=true" >> $GITHUB_OUTPUT
                      echo "requires_version_check=true" >> $GITHUB_OUTPUT
                      echo "branch_name=$SOURCE_BRANCH" >> $GITHUB_OUTPUT
                      echo "🚀 Production PR ($SOURCE_BRANCH → main) - requires version bump check"
                    elif [[ "$TARGET_BRANCH" == "staging" ]]; then
                      echo "environment=staging" >> $GITHUB_OUTPUT
                      echo "should_deploy=true" >> $GITHUB_OUTPUT
                      echo "requires_version_check=false" >> $GITHUB_OUTPUT
                      echo "branch_name=$SOURCE_BRANCH" >> $GITHUB_OUTPUT
                      echo "🔧 Staging PR ($SOURCE_BRANCH → staging) - no version check required"
                    else
                      echo "environment=dev" >> $GITHUB_OUTPUT
                      echo "should_deploy=true" >> $GITHUB_OUTPUT
                      echo "requires_version_check=false" >> $GITHUB_OUTPUT
                      echo "branch_name=$SOURCE_BRANCH" >> $GITHUB_OUTPUT
                      echo "🧪 Dev PR ($SOURCE_BRANCH → $TARGET_BRANCH) - no version check required"
                    fi
                  else
                    # Direct push to any branch
                    TARGET_BRANCH="${{ github.ref_name }}"
                    echo "branch_name=$TARGET_BRANCH" >> $GITHUB_OUTPUT
                    
                    # Deploy ALL branches to dev environment
                    echo "environment=dev" >> $GITHUB_OUTPUT
                    echo "should_deploy=true" >> $GITHUB_OUTPUT
                    echo "requires_version_check=false" >> $GITHUB_OUTPUT
                    echo "🧪 Branch push ($TARGET_BRANCH) - no version check required"
                  fi

    check_version_bump:
        if: needs.setup_environment.outputs.requires_version_check == 'true'
        runs-on: ubuntu-latest
        needs: setup_environment
        outputs:
            current_version: ${{ steps.version-check.outputs.current_version }}
            version_changed: ${{ steps.version-check.outputs.version_changed }}
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Set up Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: "20"

            - name: Check if version was bumped
              id: version-check
              run: |
                  # Get current version from PR branch
                  CURRENT_VERSION=$(node -p "require('./src/cashier_frontend/package.json').version")
                  echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
                  echo "Current version in PR: $CURRENT_VERSION"

                  # Get version from main branch
                  git fetch origin main
                  git checkout origin/main -- src/cashier_frontend/package.json
                  MAIN_VERSION=$(node -p "require('./src/cashier_frontend/package.json').version")
                  echo "Version in main branch: $MAIN_VERSION"

                  # Check if version was changed
                  if [[ "$CURRENT_VERSION" != "$MAIN_VERSION" ]]; then
                    echo "version_changed=true" >> $GITHUB_OUTPUT
                    echo "✅ Version was bumped: $MAIN_VERSION → $CURRENT_VERSION"
                  else
                    echo "version_changed=false" >> $GITHUB_OUTPUT
                    echo "❌ Version was NOT bumped (still $CURRENT_VERSION)"
                    echo ""
                    echo "🚨 PRODUCTION DEPLOYMENT REQUIRES VERSION BUMP!"
                    echo "Please update the version in src/cashier_frontend/package.json before deploying to production."
                    echo ""
                    echo "Suggestion: Update version from $CURRENT_VERSION to a new version (e.g., patch increment)"
                    exit 1
                  fi

    build_and_deploy:
        runs-on: ubuntu-latest
        needs:
            - setup_environment
            - check_version_bump
        if: always() && needs.setup_environment.outputs.should_deploy == 'true' && (needs.check_version_bump.result == 'success' || needs.setup_environment.outputs.requires_version_check == 'false')
        environment: ${{ needs.setup_environment.outputs.environment }}

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                  ref: ${{ github.head_ref || github.ref_name }}

            - name: Set up Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: "20"

            - name: Install dfx
              uses: dfinity/setup-dfx@main

            - name: Confirm successful installation
              run: dfx --version

            - name: Create private key file
              run: |
                  echo "${{ secrets.DEPLOYER }}" > private_key.pem

            - name: Import identity
              run: dfx identity import deployer private_key.pem --storage-mode=plaintext

            - name: Get cashier dev address
              run: |
                  dfx identity use deployer
                  dfx identity get-principal

            - name: Install project dependencies
              run: npm install

            - name: Get version info
              id: version-info
              run: |
                  VERSION=$(node -p "require('./src/cashier_frontend/package.json').version")
                  echo "version=$VERSION" >> $GITHUB_OUTPUT
                  echo "Deploying version: $VERSION"

            - name: Deploy to ${{ needs.setup_environment.outputs.environment }} environment
              env:
                  VITE_IC_EXPLORER_BASE_URL: ${{ vars.VITE_IC_EXPLORER_BASE_URL }}
                  VITE_BACKEND_CANISTER_ID: ${{ vars.VITE_BACKEND_CANISTER_ID }}
                  VITE_TOKEN_STORAGE_CANISTER_ID: ${{ vars.VITE_TOKEN_STORAGE_CANISTER_ID }}
                  DFX_WARNING: -mainnet_plaintext_identity
                  ENVIRONMENT: ${{ needs.setup_environment.outputs.environment }}
              run: |
                  # Set environment-specific network
                  if [[ "$ENVIRONMENT" == "production" ]]; then
                    NETWORK="ic"
                    ENV_FILE=".env.production"
                    echo "🚀 Deploying to PRODUCTION (IC Mainnet)"
                    echo "Branch: ${{ needs.setup_environment.outputs.branch_name }}"
                    echo "Version: ${{ steps.version-info.outputs.version }}"
                  elif [[ "$ENVIRONMENT" == "staging" ]]; then
                    NETWORK="staging"
                    ENV_FILE=".env.staging"
                    echo "🔧 Deploying to STAGING"
                    echo "Branch: ${{ needs.setup_environment.outputs.branch_name }}"
                    echo "Version: ${{ steps.version-info.outputs.version }}"
                  else
                    NETWORK="dev"
                    ENV_FILE=".env.dev"
                    echo "🧪 Deploying to DEV"
                    echo "Branch: ${{ needs.setup_environment.outputs.branch_name }}"
                    echo "Version: ${{ steps.version-info.outputs.version }}"
                  fi

                  # Create environment file with the correct values
                  echo "VITE_IC_EXPLORER_BASE_URL=${VITE_IC_EXPLORER_BASE_URL}" > src/cashier_frontend/${ENV_FILE}
                  echo "VITE_BACKEND_CANISTER_ID=${VITE_BACKEND_CANISTER_ID}" >> src/cashier_frontend/${ENV_FILE}
                  echo "VITE_TOKEN_STORAGE_CANISTER_ID=${VITE_TOKEN_STORAGE_CANISTER_ID}" >> src/cashier_frontend/${ENV_FILE}
                  echo "VITE_ENV=${ENVIRONMENT}" >> src/cashier_frontend/${ENV_FILE}
                  echo "VITE_BRANCH=${{ needs.setup_environment.outputs.branch_name }}" >> src/cashier_frontend/${ENV_FILE}

                  echo "Created ${ENV_FILE} with values:"
                  cat src/cashier_frontend/${ENV_FILE}

                  make g
                  dfx deploy cashier_frontend --network ${NETWORK}

    comment_pr:
        if: github.event_name == 'pull_request' && needs.setup_environment.outputs.should_deploy == 'true'
        runs-on: ubuntu-latest
        needs:
            - setup_environment
            - build_and_deploy
            - check_version_bump
        steps:
            - name: Comment on PR
              uses: actions/github-script@v7
              with:
                  script: |
                      const environment = '${{ needs.setup_environment.outputs.environment }}';
                      const version = '${{ needs.check_version_bump.outputs.current_version }}' || 'current';
                      const branch = '${{ needs.setup_environment.outputs.branch_name }}';
                      const network = environment === 'production' ? 'IC Mainnet' : 
                                    environment === 'staging' ? 'Staging' : 'Dev';

                      let message = `## 🚀 Deployment Complete!

                      **Environment:** ${environment.toUpperCase()}
                      **Network:** ${network}
                      **Branch:** ${branch}
                      **Version:** ${version}

                      Deployment finished successfully! 🎉`;

                      // Add version bump info for production
                      if (environment === 'production' && '${{ needs.check_version_bump.outputs.version_changed }}' === 'true') {
                        message += `\n\n✅ **Version was properly bumped for production deployment.**`;
                      }

                      github.rest.issues.createComment({
                        issue_number: context.issue.number,
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        body: message
                      });
