name: PR Validation Build
on:
    pull_request:
        branches:
            - staging
            - main
            - dev
        paths:
            - "src/**"

# Permissions needed for the GITHUB_TOKEN
permissions:
    actions: write # This allows the workflow to delete workflow runs
    contents: read # Default permission to read the repository contents

jobs:
    setup_environment:
        runs-on: ubuntu-latest
        outputs:
            environment: ${{ steps.set-env.outputs.environment }}
        steps:
            - name: Set validation environment
              id: set-env
              run: |
                  if [[ "${{ github.base_ref }}" == "main" ]]; then
                    echo "environment=production" >> $GITHUB_OUTPUT
                  elif [[ "${{ github.base_ref }}" == "staging" ]]; then
                    echo "environment=staging" >> $GITHUB_OUTPUT
                  else
                    echo "environment=dev" >> $GITHUB_OUTPUT
                  fi

    pr_build:
        runs-on: ubuntu-latest
        needs: setup_environment
        environment: ${{ needs.setup_environment.outputs.environment }}

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Set up Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: "20"

            - name: Install dfx
              uses: dfinity/setup-dfx@main

            - name: Confirm successful installation
              run: dfx --version

            - name: Install project dependencies
              run: npm install

            - name: Build project for ${{ needs.setup_environment.outputs.environment }} validation
              env:
                  VITE_IC_EXPLORER_BASE_URL: ${{ vars.VITE_IC_EXPLORER_BASE_URL }}
                  VITE_BACKEND_CANISTER_ID: ${{ vars.VITE_BACKEND_CANISTER_ID }}
                  VITE_TOKEN_STORAGE_CANISTER_ID: ${{ vars.VITE_TOKEN_STORAGE_CANISTER_ID }}
                  ENVIRONMENT: ${{ needs.setup_environment.outputs.environment }}
              run: |
                  # Set environment-specific configuration
                  if [[ "$ENVIRONMENT" == "production" ]]; then
                    ENV_FILE=".env.production"
                  elif [[ "$ENVIRONMENT" == "staging" ]]; then
                    ENV_FILE=".env.staging"
                  else
                    ENV_FILE=".env.dev"
                  fi

                  # Create environment file with the correct values
                  echo "VITE_IC_EXPLORER_BASE_URL=${VITE_IC_EXPLORER_BASE_URL}" > src/cashier_frontend/${ENV_FILE}
                  echo "VITE_BACKEND_CANISTER_ID=${VITE_BACKEND_CANISTER_ID}" >> src/cashier_frontend/${ENV_FILE}
                  echo "VITE_TOKEN_STORAGE_CANISTER_ID=${VITE_TOKEN_STORAGE_CANISTER_ID}" >> src/cashier_frontend/${ENV_FILE}
                  echo "VITE_ENV=${ENVIRONMENT}" >> src/cashier_frontend/${ENV_FILE}

                  echo "Created ${ENV_FILE} for validation build"

                  # Build the project
                  rustup target add wasm32-unknown-unknown
                  dfx generate cashier_backend 
                  dfx generate token_storage
                  make g  # Generate types
                  npm run build

            - name: Cleanup workflow artifacts
              uses: actions/github-script@v7
              with:
                  script: |
                      // Function to fetch all workflow runs (handling pagination)
                       async function fetchAllWorkflowRuns() {
                         const allRuns = [];
                         let page = 1;
                         let hasMorePages = true;
                         
                         while (hasMorePages) {
                           console.log(`Fetching workflow runs page ${page}...`);
                           const response = await github.rest.actions.listWorkflowRuns({
                             owner: context.repo.owner,
                             repo: context.repo.repo,
                             workflow_id: 'pr-gate.yml',
                             per_page: 100,  // Maximum allowed
                             page: page
                           });
                           
                           const runs = response.data.workflow_runs;
                           allRuns.push(...runs);
                           
                           // Check if we've reached the last page
                           if (runs.length < 100) {
                             hasMorePages = false;
                           } else {
                             page++;
                           }
                         }
                         
                         return allRuns;
                       }
                       
                       // Fetch all workflow runs
                       const allWorkflowRuns = await fetchAllWorkflowRuns();
                       console.log(`Found ${allWorkflowRuns.length} workflow runs in total.`);
                       
                       // Sort runs by date (newest first)
                       const sortedRuns = allWorkflowRuns.sort((a, b) => 
                         new Date(b.created_at) - new Date(a.created_at)
                       );
                       
                       // Keep only the latest 10 runs
                       const keepCount = 10;
                       const runsToDelete = sortedRuns.slice(keepCount);
                       
                       console.log(`Keeping ${keepCount} latest runs, deleting ${runsToDelete.length} older runs.`);
                       
                       // Delete the older runs
                       for (const run of runsToDelete) {
                         console.log(`Deleting workflow run ${run.id} from ${run.created_at}`);
                         await github.rest.actions.deleteWorkflowRun({
                           owner: context.repo.owner,
                           repo: context.repo.repo,
                           run_id: run.id
                         });
                       }
