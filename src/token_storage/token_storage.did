type AddTokenInput = record {
  token_id : text;
  token_data : opt RegisterTokenInput;
};
type AddTokensInput = record {
  tokens : vec record { text; opt RegisterTokenInput };
};
type RegisterTokenInput = record {
  id : text;
  fee : opt nat;
  decimals : nat8;
  chain : text;
  name : text;
  enabled_by_default : bool;
  ledger_id : opt principal;
  index_id : opt principal;
  symbol : text;
};
type Result = variant { Ok; Err : text };
type Result_1 = variant { Ok : vec text; Err : text };
type Result_2 = variant { Ok : TokenListResponse; Err : text };
type TokenDto = record {
  id : text;
  fee : opt nat;
  decimals : nat8;
  balance : opt nat;
  chain : text;
  name : text;
  enabled : bool;
  icrc_ledger_id : opt principal;
  icrc_index_id : opt principal;
  symbol : text;
};
type TokenListResponse = record {
  need_update_version : bool;
  tokens : vec TokenDto;
};
type TokenRegistryMetadata = record { last_updated : nat64; version : nat64 };
type UpdateTokenStatusInput = record { token_id : text; is_enabled : bool };
service : () -> {
  add_token : (AddTokenInput) -> (Result);
  add_tokens : (AddTokensInput) -> (Result_1);
  get_registry_metadata : () -> (TokenRegistryMetadata) query;
  get_registry_tokens : () -> (vec TokenDto) query;
  get_registry_version : () -> (nat64) query;
  initialize_registry : () -> (Result);
  list_tokens : () -> (Result_2) query;
  reset_user_tokens : (text) -> (Result);
  sync_token_list : () -> (Result);
  update_token_status : (UpdateTokenStatusInput) -> (Result);
}
