type AddTokenInput = record { token_id : text; token_data : opt AddTokenItem };
type AddTokenItem = record {
  fee : opt nat;
  decimals : nat8;
  chain : text;
  name : text;
  ledger_id : opt principal;
  index_id : opt principal;
  symbol : text;
};
type AddTokensInput = record {
  tokens_disable : vec record { text; opt AddTokenItem };
  tokens_enable : vec record { text; opt AddTokenItem };
};
type Chain = variant { IC };
type Result = variant { Ok : TokenListResponse; Err : text };
type Result_1 = variant { Ok : vec record { text; nat }; Err : text };
type Result_2 = variant { Ok; Err : text };
type TokenDto = record {
  id : text;
  fee : opt nat;
  decimals : nat8;
  balance : opt nat;
  chain : text;
  name : text;
  enabled : bool;
  icrc_ledger_id : opt principal;
  icrc_index_id : opt principal;
  symbol : text;
};
type TokenListResponse = record {
  need_update_version : bool;
  tokens : vec TokenDto;
  perference : opt UserPreference;
};
type TokenRegistryMetadata = record { last_updated : nat64; version : nat64 };
type UpdateTokenBalanceInput = record { balance : nat; token_id : text };
type UpdateTokenStatusInput = record { token_id : text; is_enabled : bool };
type UserPreference = record {
  hide_zero_balance : bool;
  selected_chain : vec Chain;
  hide_unknown_token : bool;
};
service : () -> {
  add_token : (AddTokenInput) -> (Result);
  add_tokens : (AddTokensInput) -> (Result);
  get_balance_cache : (text) -> (Result_1) query;
  get_registry_metadata : () -> (TokenRegistryMetadata) query;
  get_registry_tokens : () -> (vec TokenDto) query;
  get_registry_version : () -> (nat64) query;
  initialize_registry : () -> (Result_2);
  list_tokens : () -> (Result) query;
  list_user_tokens : (text) -> (Result) query;
  reset_cache : (text) -> (Result_2);
  reset_user_tokens : (text) -> (Result_2);
  sync_token_list : () -> (Result_2);
  update_token_balance : (vec UpdateTokenBalanceInput) -> (Result_2);
  update_token_status : (UpdateTokenStatusInput) -> (Result);
}
