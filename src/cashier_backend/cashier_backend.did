type AssetInfo = record {
  total_amount : nat64;
  chain : text;
  current_amount : nat64;
  address : text;
  total_claim : nat64;
  amount_per_claim : nat64;
};
type CanisterError = variant {
  HandleLogicError : text;
  ValidationErrors : text;
  AnonymousCall;
  HandleApiError : text;
};
type ClaimIntentParams = record { address : opt text };
type CreateIntentInput = record {
  link_id : text;
  intent_type : text;
  params : opt CreateIntentParams;
};
type CreateIntentParams = variant { Claim : ClaimIntentParams };
type CreateLinkInput = record { link_type : LinkType };
type GetLinkResp = record { link : Link; intent_create : opt Intent };
type Icrc21ConsentInfo = record {
  metadata : Icrc21ConsentMessageMetadata;
  consent_message : Icrc21ConsentMessage;
};
type Icrc21ConsentMessage = variant {
  LineDisplayMessage : record { pages : vec Icrc21LineDisplayPage };
  GenericDisplayMessage : text;
};
type Icrc21ConsentMessageMetadata = record {
  utc_offset_minutes : opt int16;
  language : text;
};
type Icrc21ConsentMessageRequest = record {
  arg : blob;
  method : text;
  user_preferences : Icrc21ConsentMessageSpec;
};
type Icrc21ConsentMessageSpec = record {
  metadata : Icrc21ConsentMessageMetadata;
  device_spec : opt Icrc21DeviceSpec;
};
type Icrc21DeviceSpec = variant {
  GenericDisplay;
  LineDisplay : record { characters_per_line : nat16; lines_per_page : nat16 };
};
type Icrc21Error = variant {
  GenericError : record { description : text; error_code : nat };
  InsufficientPayment : Icrc21ErrorInfo;
  UnsupportedCanisterCall : Icrc21ErrorInfo;
  ConsentMessageUnavailable : Icrc21ErrorInfo;
};
type Icrc21ErrorInfo = record { description : text };
type Icrc21LineDisplayPage = record { lines : vec text };
type Icrc21SupportedStandard = record { url : text; name : text };
type Icrc28TrustedOriginsResponse = record { trusted_origins : vec text };
type Intent = record {
  id : text;
  status : text;
  link_id : text;
  creator_id : text;
  intent_type : text;
};
type Link = variant {
  NftCreateAndAirdropLink : NftCreateAndAirdropLink;
  TipLink : TipLink;
};
type LinkDetailUpdateAssetInfoInput = record {
  total_amount : nat64;
  chain : text;
  address : text;
  amount_per_claim : nat64;
};
type LinkDetailUpdateInput = record {
  title : opt text;
  asset_info : opt vec LinkDetailUpdateAssetInfoInput;
  description : opt text;
  link_image_url : opt text;
  template : opt text;
  nft_image : opt text;
};
type LinkStateMachineActionParams = variant { Update : UpdateLinkParams };
type LinkType = variant { TipLink; NftCreateAndAirdrop };
type NftCreateAndAirdropLink = record {
  id : text;
  title : opt text;
  creator : opt text;
  asset_info : opt vec AssetInfo;
  link_type : opt text;
  create_at : opt nat64;
  description : opt text;
  link_image_url : opt text;
  state : opt text;
  template : opt text;
  nft_image : opt text;
};
type PaginateInput = record { offset : nat64; limit : nat64 };
type PaginateResult = record {
  metadata : PaginateResultMetadata;
  data : vec Link;
};
type PaginateResultMetadata = record {
  is_next : bool;
  is_prev : bool;
  total : nat64;
  offset : nat64;
  limit : nat64;
};
type Result = variant { Ok; Err : text };
type Result_1 = variant { Ok : Intent; Err : text };
type Result_2 = variant { Ok : text; Err : CanisterError };
type Result_3 = variant { Ok : User; Err : text };
type Result_4 = variant { Ok : GetLinkResp; Err : text };
type Result_5 = variant { Ok : PaginateResult; Err : text };
type Result_6 = variant { Ok : Icrc21ConsentInfo; Err : Icrc21Error };
type Result_7 = variant { Ok : Link; Err : CanisterError };
type TipLink = record {
  id : text;
  title : opt text;
  creator : opt text;
  asset_info : opt vec AssetInfo;
  link_type : opt text;
  create_at : opt nat64;
  description : opt text;
  link_image_url : opt text;
  state : opt text;
  template : opt text;
};
type UpdateLinkInput = record {
  id : text;
  action : text;
  params : opt LinkStateMachineActionParams;
};
type UpdateLinkParams = record { params : opt LinkDetailUpdateInput };
type User = record { id : text; email : opt text; wallet : text };
service : () -> {
  claim_nft : (text, opt text) -> (Result);
  create_intent : (CreateIntentInput) -> (Result_1);
  create_link : (CreateLinkInput) -> (Result_2);
  create_user : () -> (Result_3);
  get_link : (text) -> (Result_4) query;
  get_links : (opt PaginateInput) -> (Result_5) query;
  get_user : () -> (Result_3) query;
  icrc10_supported_standards : () -> (vec Icrc21SupportedStandard) query;
  icrc21_canister_call_consent_message : (Icrc21ConsentMessageRequest) -> (
      Result_6,
    );
  icrc28_trusted_origins : () -> (Icrc28TrustedOriginsResponse);
  update_link : (UpdateLinkInput) -> (Result_7);
}
