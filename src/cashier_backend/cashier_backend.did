// Copyright (c) 2025 Cashier Protocol Labs
// Licensed under the MIT License (see LICENSE file in the project root)

type ActionDto = record {
  id : text;
  icrc_112_requests : opt vec vec Icrc112Request;
  creator : text;
  intents : vec IntentDto;
  "type" : text;
  state : text;
};
type AssetDto = record { chain : text; address : text };
type AssetInfoDto = record {
  amount_per_link_use_action : nat64;
  chain : text;
  label : text;
  address : text;
};
type CanisterError = variant {
  InvalidDataError : text;
  InvalidStateTransition : record { to : text; from : text };
  TransactionTimeout : text;
  InvalidInput : text;
  HandleLogicError : text;
  CanisterCallRejectError : record {
    method : text;
    code : RejectionCode;
    canister_id : text;
    message : text;
  };
  ParsePrincipalError : text;
  UnknownError : text;
  InsufficientBalance : record { available : nat64; required : nat64 };
  NotFound : text;
  ValidationErrors : text;
  ParseAccountError : text;
  Unauthorized : text;
  AlreadyExists : text;
  DependencyError : text;
  AnonymousCall;
  CanisterCallError : record {
    method : text;
    canister_id : text;
    message : text;
  };
  CallCanisterFailed : text;
};
type CreateActionAnonymousInput = record {
  link_id : text;
  action_type : text;
  wallet_address : text;
};
type CreateActionInput = record { link_id : text; action_type : text };
type CreateLinkInput = record { link_type : text };
type CreateLinkInputV2 = record {
  title : text;
  asset_info : vec LinkDetailUpdateAssetInfoInput;
  link_type : text;
  description : opt text;
  link_image_url : opt text;
  template : text;
  link_use_action_max_count : nat64;
  nft_image : opt text;
};
type GetLinkOptions = record { action_type : text };
type GetLinkResp = record { action : opt ActionDto; link : LinkDto };
type Icrc112Request = record {
  arg : text;
  method : text;
  canister_id : text;
  nonce : opt text;
};
type Icrc21ConsentInfo = record {
  metadata : Icrc21ConsentMessageMetadata;
  consent_message : Icrc21ConsentMessage;
};
type Icrc21ConsentMessage = variant {
  LineDisplayMessage : record { pages : vec Icrc21LineDisplayPage };
  GenericDisplayMessage : text;
};
type Icrc21ConsentMessageMetadata = record {
  utc_offset_minutes : opt int16;
  language : text;
};
type Icrc21ConsentMessageRequest = record {
  arg : blob;
  method : text;
  user_preferences : Icrc21ConsentMessageSpec;
};
type Icrc21ConsentMessageSpec = record {
  metadata : Icrc21ConsentMessageMetadata;
  device_spec : opt Icrc21DeviceSpec;
};
type Icrc21DeviceSpec = variant {
  GenericDisplay;
  LineDisplay : record { characters_per_line : nat16; lines_per_page : nat16 };
};
type Icrc21Error = variant {
  GenericError : record { description : text; error_code : nat };
  InsufficientPayment : Icrc21ErrorInfo;
  UnsupportedCanisterCall : Icrc21ErrorInfo;
  ConsentMessageUnavailable : Icrc21ErrorInfo;
};
type Icrc21ErrorInfo = record { description : text };
type Icrc21LineDisplayPage = record { lines : vec text };
type Icrc21SupportedStandard = record { url : text; name : text };
type Icrc28TrustedOriginsResponse = record { trusted_origins : vec text };
type IntentDto = record {
  id : text;
  chain : text;
  task : text;
  "type" : text;
  created_at : nat64;
  type_metadata : vec record { text; MetadataValue };
  state : text;
  transactions : vec TransactionDto;
};
type LinkDetailUpdateAssetInfoInput = record {
  amount_per_link_use_action : nat64;
  chain : text;
  label : text;
  address : text;
};
type LinkDetailUpdateInput = record {
  title : opt text;
  asset_info : opt vec AssetInfoDto;
  link_type : opt text;
  description : opt text;
  link_image_url : opt text;
  template : opt text;
  link_use_action_max_count : opt nat64;
  nft_image : opt text;
};
type LinkDto = record {
  id : text;
  title : opt text;
  creator : text;
  asset_info : opt vec AssetInfoDto;
  link_type : opt text;
  metadata : opt vec record { text; text };
  create_at : nat64;
  description : opt text;
  state : text;
  template : opt text;
  link_use_action_max_count : nat64;
  link_use_action_counter : nat64;
};
type LinkGetUserStateInput = record {
  link_id : text;
  action_type : text;
  anonymous_wallet_address : opt text;
};
type LinkGetUserStateOutput = record {
  action : ActionDto;
  link_user_state : text;
};
type LinkUpdateUserStateInput = record {
  link_id : text;
  action_type : text;
  goto : text;
  anonymous_wallet_address : opt text;
};
type MetadataValue = variant {
  Nat : nat;
  U64 : nat64;
  MaybeNat : opt nat;
  String : text;
  MaybeMemo : opt blob;
  Asset : AssetDto;
  Wallet : AssetDto;
};
type MigrationResult = record {
  transaction_v2_total : nat64;
  intents_migrated : nat64;
  intent_v1_total : nat64;
  intent_v2_total : nat64;
  transactions_migrated : nat64;
  transaction_v1_total : nat64;
};
type MigrationStatus = record {
  v1_total : nat64;
  v2_total : nat64;
  migration_complete : bool;
};
type PaginateInput = record { offset : nat64; limit : nat64 };
type PaginateResult = record {
  metadata : PaginateResultMetadata;
  data : vec LinkDto;
};
type PaginateResultMetadata = record {
  is_next : bool;
  is_prev : bool;
  total : nat64;
  offset : nat64;
  limit : nat64;
};
type ProcessActionAnonymousInput = record {
  action_id : text;
  link_id : text;
  action_type : text;
  wallet_address : text;
};
type ProcessActionInput = record {
  action_id : text;
  link_id : text;
  action_type : text;
};
type RejectionCode = variant {
  NoError;
  CanisterError;
  SysTransient;
  DestinationInvalid;
  Unknown;
  SysFatal;
  CanisterReject;
};
type Result = variant { Ok : ActionDto; Err : CanisterError };
type Result_1 = variant { Ok : TransactionDto; Err : CanisterError };
type Result_2 = variant { Ok : text; Err : CanisterError };
type Result_3 = variant { Ok : LinkDto; Err : CanisterError };
type Result_4 = variant { Ok : UserDto; Err : text };
type Result_5 = variant { Ok : GetLinkResp; Err : text };
type Result_6 = variant { Ok : PaginateResult; Err : text };
type Result_7 = variant { Ok : Icrc21ConsentInfo; Err : Icrc21Error };
type Result_8 = variant {
  Ok : opt LinkGetUserStateOutput;
  Err : CanisterError;
};
type TransactionDto = record {
  id : text;
  protocol : text;
  protocol_metadata : vec record { text; MetadataValue };
  from_call_type : text;
  created_at : nat64;
  state : text;
  dependency : opt vec text;
  group : nat16;
};
type TriggerTransactionInput = record {
  transaction_id : text;
  action_id : text;
  link_id : text;
};
type UpdateActionInput = record {
  action_id : text;
  link_id : text;
  external : bool;
};
type UpdateLinkInput = record {
  id : text;
  action : text;
  params : opt LinkDetailUpdateInput;
};
type UserDto = record { id : text; email : opt text; wallet : text };
service : () -> {
  admin_get_intent : (text) -> (Result) query;
  admin_get_transaction : (text) -> (Result_1) query;
  create_action : (CreateActionInput) -> (Result);
  create_action_anonymous : (CreateActionAnonymousInput) -> (Result);
  create_link : (CreateLinkInput) -> (Result_2);
  create_link_v2 : (CreateLinkInputV2) -> (Result_3);
  create_user : () -> (Result_4);
  get_link : (text, opt GetLinkOptions) -> (Result_5) query;
  get_links : (opt PaginateInput) -> (Result_6) query;
  get_migration_overview : () -> (MigrationStatus, MigrationStatus) query;
  get_status : (text) -> (MigrationStatus) query;
  get_user : () -> (Result_4) query;
  icrc10_supported_standards : () -> (vec Icrc21SupportedStandard) query;
  icrc21_canister_call_consent_message : (Icrc21ConsentMessageRequest) -> (
      Result_7,
    );
  icrc28_trusted_origins : () -> (Icrc28TrustedOriginsResponse);
  link_get_user_state : (LinkGetUserStateInput) -> (Result_8);
  link_update_user_state : (LinkUpdateUserStateInput) -> (Result_8);
  migrate : (text) -> (MigrationResult);
  migrate_all : () -> (MigrationResult, MigrationResult);
  process_action : (ProcessActionInput) -> (Result);
  process_action_anonymous : (ProcessActionAnonymousInput) -> (Result);
  trigger_transaction : (TriggerTransactionInput) -> (Result_2);
  update_action : (UpdateActionInput) -> (Result);
  update_link : (UpdateLinkInput) -> (Result_3);
}
